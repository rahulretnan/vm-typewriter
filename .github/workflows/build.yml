name: Build Distributions

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pyautogui pygetwindow pynput

      - name: Build with PyInstaller
        run: |
          pyinstaller --onefile --windowed typewriter.py
          pyinstaller --onefile --windowed typewriter-receiver.py

      - name: Archive build artifacts
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: typewriter-${{ matrix.os }}
          path: |
            dist/typewriter
            dist/typewriter-receiver

      - name: Get current version
        id: get_version
        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - name: Increment version
        id: increment_version
        run: |
          VERSION=$(cat version.txt)
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          PATCH_VERSION=${VERSION_PARTS[2]}
          NEW_PATCH_VERSION=$((PATCH_VERSION + 1))
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$NEW_PATCH_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo $NEW_VERSION > version.txt

      - name: Commit new version
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add version.txt
          git commit -m "Increment version to ${{ env.NEW_VERSION }}"
          git push

      - name: Create Tag
        if: success()
        id: create_tag
        uses: actions/github-script@v6
        with:
          script: |
            const tag = process.env.NEW_VERSION;
            await github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tag}`,
              sha: context.sha,
            });
            return tag;

      - name: Create GitHub Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.result }}
          release_name: Release ${{ steps.create_tag.outputs.result }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: success()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/typewriter
          asset_name: typewriter-${{ matrix.os }}
          asset_content_type: application/zip

      - name: Upload Release Asset
        if: success()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/typewriter-receiver
          asset_name: typewriter-receiver-${{ matrix.os }}
          asset_content_type: application/zip
